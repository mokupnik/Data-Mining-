{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import (datasets, decomposition, ensemble, manifold, random_projection)\n",
    "from scipy.spatial import distance_matrix as dist\n",
    "from scipy.stats import mode as mode\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Wczytanie danych"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "digits = datasets.load_digits()\n",
    "X = digits.data\n",
    "y = digits.target\n",
    "N, d = X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_projected = random_projection.SparseRandomProjection(n_components=2).fit_transform(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_pca = decomposition.PCA(n_components=2).fit_transform(X) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_kpca = decomposition.KernelPCA(n_components=2, kernel=\"rbf\", gamma=10).fit_transform(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_iso = manifold.Isomap(30, n_components=2).fit_transform(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_lle = manifold.LocallyLinearEmbedding(30, n_components=2).fit_transform(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_mds = manifold.MDS(n_components=2, n_init=1, max_iter=100).fit_transform(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "X_tsne = manifold.TSNE(n_components=2, init='pca').fit_transform(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def KNN(train_x,test_y,train_labels,K):\n",
    "    closer = np.argpartition(dist(test_y,train_x),K)\n",
    "    targets = train_labels[closer]\n",
    "    labels= targets[:,:K]\n",
    "    targets = mode(labels, axis=1)[0]\n",
    "    \n",
    "    return targets.ravel()\n",
    "\n",
    "def accuracy(predictions,targets):\n",
    "    result=(list(predictions==targets))\n",
    "    err = len(result) - result.count(True)\n",
    "    accuracy = result.count(True)/len(result) * 100\n",
    "    return accuracy\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def crossvalidation(X,labels):\n",
    "    indices = np.random.uniform(0, 10, len(X)).astype(int)\n",
    "    sum= np.arange(1,20,3)\n",
    "    Ks = np.arange(1,20,3)\n",
    "    for j,k in enumerate(Ks):\n",
    "        for i in range(10):\n",
    "            X_test = X[indices == i]\n",
    "            X_labels = labels[indices == i]\n",
    "            Y_train = X[indices != i]\n",
    "            Y_labels = labels[indices != i]\n",
    "            new_targets = KNN(Y_train,X_test,Y_labels,k)\n",
    "            sum[j] += accuracy(new_targets,X_labels)\n",
    "    return (sum/10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "d = {'w/o reducing':crossvalidation(X,y),'PCA':crossvalidation(X_pca,y),'KPCA':crossvalidation(X_kpca,y),\n",
    "    'Isomap':crossvalidation(X_iso,y),'LLE':crossvalidation(X_lle,y), 'MDS':crossvalidation(X_mds,y),'t-SNE':crossvalidation(X_tsne,y)}\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "Ks = np.arange(1,20,3)\n",
    "df = pd.DataFrame(data=d,index=Ks)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>w/o reducing</th>\n",
       "      <th>PCA</th>\n",
       "      <th>KPCA</th>\n",
       "      <th>Isomap</th>\n",
       "      <th>LLE</th>\n",
       "      <th>MDS</th>\n",
       "      <th>t-SNE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>98.4</td>\n",
       "      <td>58.4</td>\n",
       "      <td>10.9</td>\n",
       "      <td>70.3</td>\n",
       "      <td>41.2</td>\n",
       "      <td>58.7</td>\n",
       "      <td>98.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>98.5</td>\n",
       "      <td>62.1</td>\n",
       "      <td>11.1</td>\n",
       "      <td>73.2</td>\n",
       "      <td>48.0</td>\n",
       "      <td>65.5</td>\n",
       "      <td>98.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>98.6</td>\n",
       "      <td>64.5</td>\n",
       "      <td>9.9</td>\n",
       "      <td>76.0</td>\n",
       "      <td>50.8</td>\n",
       "      <td>68.2</td>\n",
       "      <td>99.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>98.5</td>\n",
       "      <td>65.0</td>\n",
       "      <td>10.8</td>\n",
       "      <td>76.8</td>\n",
       "      <td>50.3</td>\n",
       "      <td>69.0</td>\n",
       "      <td>99.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>98.8</td>\n",
       "      <td>66.3</td>\n",
       "      <td>10.7</td>\n",
       "      <td>77.1</td>\n",
       "      <td>52.2</td>\n",
       "      <td>69.5</td>\n",
       "      <td>99.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>98.9</td>\n",
       "      <td>66.3</td>\n",
       "      <td>11.5</td>\n",
       "      <td>78.2</td>\n",
       "      <td>52.5</td>\n",
       "      <td>69.9</td>\n",
       "      <td>99.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>98.9</td>\n",
       "      <td>66.4</td>\n",
       "      <td>11.4</td>\n",
       "      <td>78.0</td>\n",
       "      <td>53.2</td>\n",
       "      <td>70.3</td>\n",
       "      <td>99.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    w/o reducing   PCA  KPCA  Isomap   LLE   MDS  t-SNE\n",
       "1           98.4  58.4  10.9    70.3  41.2  58.7   98.6\n",
       "4           98.5  62.1  11.1    73.2  48.0  65.5   98.7\n",
       "7           98.6  64.5   9.9    76.0  50.8  68.2   99.0\n",
       "10          98.5  65.0  10.8    76.8  50.3  69.0   99.3\n",
       "13          98.8  66.3  10.7    77.1  52.2  69.5   99.6\n",
       "16          98.9  66.3  11.5    78.2  52.5  69.9   99.7\n",
       "19          98.9  66.4  11.4    78.0  53.2  70.3   99.3"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot(figsize=(10,7))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
